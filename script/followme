#!/usr/bin/perl

use strict;
use lib '../lib';

use IO::File;
use Getopt::Long;
use App::Followme qw(configure_followme followme initialize_site);

my ($initialize, $help);
GetOptions(init => \$initialize,
           help => \$help);

my $dir = shift @ARGV;
read_configuration($dir);

if ($initialize) {
    initialize_site($dir);
} elsif ($help) {
    show_help();
} else {
    followme($dir);
}

#----------------------------------------------------------------------
# Construct configuration file name

sub configuration_file {
    my ($dir) = @_;
    
    my @path = split(/\//, $0);
    my $basename = pop(@path);
    $basename =~ s/[^\.]*$/cfg/;
    
    @path = split($dir);
    push(@path, $basename);
    
    return join('/', @path);
}

#----------------------------------------------------------------------
# Load a module containing the named routine

sub load_module {
    my ($subroutine) = @_;
    
    my @path = split(/::/, $subroutine);
    pop(@path);
    
    if (@path) {
        my $pkg = join('::', @path);
        eval "require $pkg" or die "Subroutine not found: $subroutine\n";
    }
    
    return \&$subroutine;
}

#----------------------------------------------------------------------
# Read configuration file

sub read_configuration {
    my ($dir) = @_;
    $dir = '.' unless defined $dir;
    
    my $filename = configuration_file($dir);
    my $fd = IO::File->new($filename, 'r');
    return unless $fd;

    while (<$fd>) {
        my ($line, $comment) = split(/#/, $_, 2);
        $line =~ s/\s+$//;

        if (length $line) {
            die "Bad configuration: $line\n" unless $line =~ /=/;
            my ($name, $value) = split(/\s*=\s*/, $line, 2);
            $value = load_module($value) if $name eq 'page_converter';
            
            configure_followme($name, $value) if $value;
        }
    }

    close($fd);
    return;
}

#----------------------------------------------------------------------
# Print the help file

sub show_help {
    print <<'EOQ';
Usage: followme [directory]

Update a static website after changes. Constant portions of each page are
updated to match, text files are converted to html, and indexes are created
for new files in the archive.

The script is run on the directory passed as its argument. If no argument is
given, it is run on the current directory.

Options:

--help  print this help
--init  Copy default templates to directory

EOQ
}